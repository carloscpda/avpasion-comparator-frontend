### This file was generated by Nexus Schema
### Do not make changes to this file directly

type BacklightType {
  createdAt: DateTime
  description: String
  name: String!
  updatedAt: DateTime
}

type BacklightTypeEntity {
  attributes: BacklightType
  id: ID
}

type BacklightTypeEntityResponse {
  data: BacklightTypeEntity
}

type BacklightTypeEntityResponseCollection {
  data: [BacklightTypeEntity!]!
  meta: ResponseCollectionMeta!
}

input BacklightTypeFiltersInput {
  and: [BacklightTypeFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: BacklightTypeFiltersInput
  or: [BacklightTypeFiltersInput]
  updatedAt: DateTimeFilterInput
}

input BacklightTypeInput {
  description: String
  name: String
}

type BacklightTypeRelationResponseCollection {
  data: [BacklightTypeEntity!]!
}

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type Brand {
  createdAt: DateTime
  logo: UploadFileEntityResponse
  name: String!
  series(
    filters: TvSerieFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TvSerieRelationResponseCollection
  updatedAt: DateTime
}

type BrandEntity {
  attributes: Brand
  id: ID
}

type BrandEntityResponse {
  data: BrandEntity
}

type BrandEntityResponseCollection {
  data: [BrandEntity!]!
  meta: ResponseCollectionMeta!
}

input BrandFiltersInput {
  and: [BrandFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: BrandFiltersInput
  or: [BrandFiltersInput]
  series: TvSerieFiltersInput
  updatedAt: DateTimeFilterInput
}

input BrandInput {
  logo: ID
  name: String
  series: [ID]
}

type BrandRelationResponseCollection {
  data: [BrandEntity!]!
}

type Color {
  createdAt: DateTime
  hex: String!
  name: String!
  updatedAt: DateTime
}

type ColorCreation {
  createdAt: DateTime
  description: String!
  name: String!
  updatedAt: DateTime
}

type ColorCreationEntity {
  attributes: ColorCreation
  id: ID
}

type ColorCreationEntityResponse {
  data: ColorCreationEntity
}

type ColorCreationEntityResponseCollection {
  data: [ColorCreationEntity!]!
  meta: ResponseCollectionMeta!
}

input ColorCreationFiltersInput {
  and: [ColorCreationFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: ColorCreationFiltersInput
  or: [ColorCreationFiltersInput]
  updatedAt: DateTimeFilterInput
}

input ColorCreationInput {
  description: String
  name: String
}

type ColorCreationRelationResponseCollection {
  data: [ColorCreationEntity!]!
}

type ColorDepth {
  createdAt: DateTime
  description: String
  name: String!
  updatedAt: DateTime
}

type ColorDepthEntity {
  attributes: ColorDepth
  id: ID
}

type ColorDepthEntityResponse {
  data: ColorDepthEntity
}

type ColorDepthEntityResponseCollection {
  data: [ColorDepthEntity!]!
  meta: ResponseCollectionMeta!
}

input ColorDepthFiltersInput {
  and: [ColorDepthFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: ColorDepthFiltersInput
  or: [ColorDepthFiltersInput]
  updatedAt: DateTimeFilterInput
}

input ColorDepthInput {
  description: String
  name: String
}

type ColorDepthRelationResponseCollection {
  data: [ColorDepthEntity!]!
}

type ColorEntity {
  attributes: Color
  id: ID
}

type ColorEntityResponse {
  data: ColorEntity
}

type ColorEntityResponseCollection {
  data: [ColorEntity!]!
  meta: ResponseCollectionMeta!
}

input ColorFiltersInput {
  and: [ColorFiltersInput]
  createdAt: DateTimeFilterInput
  hex: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: ColorFiltersInput
  or: [ColorFiltersInput]
  updatedAt: DateTimeFilterInput
}

input ColorInput {
  hex: String
  name: String
}

type ColorRelationResponseCollection {
  data: [ColorEntity!]!
}

type ColorimetryTechnology {
  createdAt: DateTime
  description: String
  name: String!
  updatedAt: DateTime
}

type ColorimetryTechnologyEntity {
  attributes: ColorimetryTechnology
  id: ID
}

type ColorimetryTechnologyEntityResponse {
  data: ColorimetryTechnologyEntity
}

type ColorimetryTechnologyEntityResponseCollection {
  data: [ColorimetryTechnologyEntity!]!
  meta: ResponseCollectionMeta!
}

input ColorimetryTechnologyFiltersInput {
  and: [ColorimetryTechnologyFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: ColorimetryTechnologyFiltersInput
  or: [ColorimetryTechnologyFiltersInput]
  updatedAt: DateTimeFilterInput
}

input ColorimetryTechnologyInput {
  description: String
  name: String
}

type ColorimetryTechnologyRelationResponseCollection {
  data: [ColorimetryTechnologyEntity!]!
}

type ComponentConnectionConnection {
  connectionTechnologies(
    filters: ConnectionTechnologyFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ConnectionTechnologyRelationResponseCollection
  id: ID!
  privateName: String
  quantity: Int!
  type: ConnectionTypeEntityResponse
}

input ComponentConnectionConnectionFiltersInput {
  and: [ComponentConnectionConnectionFiltersInput]
  connectionTechnologies: ConnectionTechnologyFiltersInput
  not: ComponentConnectionConnectionFiltersInput
  or: [ComponentConnectionConnectionFiltersInput]
  privateName: StringFilterInput
  quantity: IntFilterInput
  type: ConnectionTypeFiltersInput
}

input ComponentConnectionConnectionInput {
  connectionTechnologies: [ID]
  id: ID
  privateName: String
  quantity: Int
  type: ID
}

type ComponentDesignDimensions {
  depth: Float!
  height: Float!
  id: ID!
  weight: Float!
  width: Float!
}

input ComponentDesignDimensionsFiltersInput {
  and: [ComponentDesignDimensionsFiltersInput]
  depth: FloatFilterInput
  height: FloatFilterInput
  not: ComponentDesignDimensionsFiltersInput
  or: [ComponentDesignDimensionsFiltersInput]
  weight: FloatFilterInput
  width: FloatFilterInput
}

input ComponentDesignDimensionsInput {
  depth: Float
  height: Float
  id: ID
  weight: Float
  width: Float
}

type ComponentGeneralBrand {
  id: ID!
  model: String!
  serie: TvSerieEntityResponse
}

input ComponentGeneralBrandFiltersInput {
  and: [ComponentGeneralBrandFiltersInput]
  model: StringFilterInput
  not: ComponentGeneralBrandFiltersInput
  or: [ComponentGeneralBrandFiltersInput]
  serie: TvSerieFiltersInput
}

input ComponentGeneralBrandInput {
  id: ID
  model: String
  serie: ID
}

type ComponentImageBacklightAndContrast {
  backlightType: BacklightTypeEntityResponse
  brightness: Int
  contrast: String
  id: ID!
  zoneNumber: Int
}

input ComponentImageBacklightAndContrastFiltersInput {
  and: [ComponentImageBacklightAndContrastFiltersInput]
  backlightType: BacklightTypeFiltersInput
  brightness: IntFilterInput
  contrast: StringFilterInput
  not: ComponentImageBacklightAndContrastFiltersInput
  or: [ComponentImageBacklightAndContrastFiltersInput]
  zoneNumber: IntFilterInput
}

input ComponentImageBacklightAndContrastInput {
  backlightType: ID
  brightness: Int
  contrast: String
  id: ID
  zoneNumber: Int
}

type ComponentImageColorimetry {
  colorDepth: ColorDepthEntityResponse
  dciP3: Float
  id: ID!
  rec709: Float
  rec2020: Float
  sRGB: Float
  technologies(
    filters: ColorimetryTechnologyFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ColorimetryTechnologyRelationResponseCollection
}

input ComponentImageColorimetryFiltersInput {
  and: [ComponentImageColorimetryFiltersInput]
  colorDepth: ColorDepthFiltersInput
  dciP3: FloatFilterInput
  not: ComponentImageColorimetryFiltersInput
  or: [ComponentImageColorimetryFiltersInput]
  rec709: FloatFilterInput
  rec2020: FloatFilterInput
  sRGB: FloatFilterInput
  technologies: ColorimetryTechnologyFiltersInput
}

input ComponentImageColorimetryInput {
  colorDepth: ID
  dciP3: Float
  id: ID
  rec709: Float
  rec2020: Float
  sRGB: Float
  technologies: [ID]
}

type ComponentImageCrystal {
  antiReflectiveFilter: ENUM_COMPONENTIMAGECRYSTAL_ANTIREFLECTIVEFILTER
  horizontalVisionAngle: Float
  id: ID!
  verticalVisionAngle: Float
}

input ComponentImageCrystalFiltersInput {
  and: [ComponentImageCrystalFiltersInput]
  antiReflectiveFilter: StringFilterInput
  horizontalVisionAngle: FloatFilterInput
  not: ComponentImageCrystalFiltersInput
  or: [ComponentImageCrystalFiltersInput]
  verticalVisionAngle: FloatFilterInput
}

input ComponentImageCrystalInput {
  antiReflectiveFilter: ENUM_COMPONENTIMAGECRYSTAL_ANTIREFLECTIVEFILTER
  horizontalVisionAngle: Float
  id: ID
  verticalVisionAngle: Float
}

type ComponentImageHdr {
  id: ID!
  technologies(
    filters: HdrTechnologyFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): HdrTechnologyRelationResponseCollection
}

input ComponentImageHdrFiltersInput {
  and: [ComponentImageHdrFiltersInput]
  not: ComponentImageHdrFiltersInput
  or: [ComponentImageHdrFiltersInput]
  technologies: HdrTechnologyFiltersInput
}

input ComponentImageHdrInput {
  id: ID
  technologies: [ID]
}

type ComponentImageProcessing {
  id: ID!
  processor: ImageProcessorEntityResponse
}

input ComponentImageProcessingFiltersInput {
  and: [ComponentImageProcessingFiltersInput]
  not: ComponentImageProcessingFiltersInput
  or: [ComponentImageProcessingFiltersInput]
  processor: ImageProcessorFiltersInput
}

input ComponentImageProcessingInput {
  id: ID
  processor: ID
}

type ComponentImageResponseTimes {
  gaming(
    filters: GamingTechnologyFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): GamingTechnologyRelationResponseCollection
  id: ID!
  inputLag60: Float
  inputLag120: Float
}

input ComponentImageResponseTimesFiltersInput {
  and: [ComponentImageResponseTimesFiltersInput]
  gaming: GamingTechnologyFiltersInput
  inputLag60: FloatFilterInput
  inputLag120: FloatFilterInput
  not: ComponentImageResponseTimesFiltersInput
  or: [ComponentImageResponseTimesFiltersInput]
}

input ComponentImageResponseTimesInput {
  gaming: [ID]
  id: ID
  inputLag60: Float
  inputLag120: Float
}

type ComponentImageTechnology {
  creationColor: ColorCreationEntityResponse
  id: ID!
  image: ImageTechnologyEntityResponse
  lightingType: LightingTypeEntityResponse
  panel: PanelTechnologyEntityResponse
  panelManufacturer: PanelManufacturerEntityResponse
  refreshRate: Float
}

input ComponentImageTechnologyFiltersInput {
  and: [ComponentImageTechnologyFiltersInput]
  creationColor: ColorCreationFiltersInput
  image: ImageTechnologyFiltersInput
  lightingType: LightingTypeFiltersInput
  not: ComponentImageTechnologyFiltersInput
  or: [ComponentImageTechnologyFiltersInput]
  panel: PanelTechnologyFiltersInput
  panelManufacturer: PanelManufacturerFiltersInput
  refreshRate: FloatFilterInput
}

input ComponentImageTechnologyInput {
  creationColor: ID
  id: ID
  image: ID
  lightingType: ID
  panel: ID
  panelManufacturer: ID
  refreshRate: Float
}

type ComponentSectionsConnections {
  cable(
    filters: ComponentConnectionConnectionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentConnectionConnection]
  dvb(
    filters: DvbFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): DvbRelationResponseCollection
  extraFeatures(
    filters: ExtraFeatureFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ExtraFeatureRelationResponseCollection
  hbbTV: Boolean
  id: ID!
  score: Float!
  wireless(
    filters: WirelessConnectionTechnologyFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): WirelessConnectionTechnologyRelationResponseCollection
}

input ComponentSectionsConnectionsFiltersInput {
  and: [ComponentSectionsConnectionsFiltersInput]
  cable: ComponentConnectionConnectionFiltersInput
  dvb: DvbFiltersInput
  extraFeatures: ExtraFeatureFiltersInput
  hbbTV: BooleanFilterInput
  not: ComponentSectionsConnectionsFiltersInput
  or: [ComponentSectionsConnectionsFiltersInput]
  score: FloatFilterInput
  wireless: WirelessConnectionTechnologyFiltersInput
}

input ComponentSectionsConnectionsInput {
  cable: [ComponentConnectionConnectionInput]
  dvb: [ID]
  extraFeatures: [ID]
  hbbTV: Boolean
  id: ID
  score: Float
  wireless: [ID]
}

type ComponentSectionsDesign {
  colors(
    filters: ColorFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ColorRelationResponseCollection
  dimensionsWithStand: ComponentDesignDimensions
  dimensionsWithoutStand: ComponentDesignDimensions
  id: ID!
  pictures(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection
  score: Float!
  screenShape: ScreenShapeEntityResponse
  vesa: VesaSizeEntityResponse
}

input ComponentSectionsDesignFiltersInput {
  and: [ComponentSectionsDesignFiltersInput]
  colors: ColorFiltersInput
  dimensionsWithStand: ComponentDesignDimensionsFiltersInput
  dimensionsWithoutStand: ComponentDesignDimensionsFiltersInput
  not: ComponentSectionsDesignFiltersInput
  or: [ComponentSectionsDesignFiltersInput]
  score: FloatFilterInput
  screenShape: ScreenShapeFiltersInput
  vesa: VesaSizeFiltersInput
}

input ComponentSectionsDesignInput {
  colors: [ID]
  dimensionsWithStand: ComponentDesignDimensionsInput
  dimensionsWithoutStand: ComponentDesignDimensionsInput
  id: ID
  pictures: [ID]
  score: Float
  screenShape: ID
  vesa: ID
}

type ComponentSectionsGeneral {
  brand: ComponentGeneralBrand
  id: ID!
  releaseDate: Date!
  screenSize: Float!
}

input ComponentSectionsGeneralFiltersInput {
  and: [ComponentSectionsGeneralFiltersInput]
  brand: ComponentGeneralBrandFiltersInput
  not: ComponentSectionsGeneralFiltersInput
  or: [ComponentSectionsGeneralFiltersInput]
  releaseDate: DateFilterInput
  screenSize: FloatFilterInput
}

input ComponentSectionsGeneralInput {
  brand: ComponentGeneralBrandInput
  id: ID
  releaseDate: Date
  screenSize: Float
}

type ComponentSectionsImage {
  backlightAndContrast: ComponentImageBacklightAndContrast
  colorimetry: ComponentImageColorimetry
  crystal: ComponentImageCrystal
  hdr: ComponentImageHdr
  id: ID!
  processing: ComponentImageProcessing
  resolution: ScreenResolutionEntityResponse
  responseTimes: ComponentImageResponseTimes
  score: Float!
  technology: ComponentImageTechnology
}

input ComponentSectionsImageFiltersInput {
  and: [ComponentSectionsImageFiltersInput]
  backlightAndContrast: ComponentImageBacklightAndContrastFiltersInput
  colorimetry: ComponentImageColorimetryFiltersInput
  crystal: ComponentImageCrystalFiltersInput
  hdr: ComponentImageHdrFiltersInput
  not: ComponentSectionsImageFiltersInput
  or: [ComponentSectionsImageFiltersInput]
  processing: ComponentImageProcessingFiltersInput
  resolution: ScreenResolutionFiltersInput
  responseTimes: ComponentImageResponseTimesFiltersInput
  score: FloatFilterInput
  technology: ComponentImageTechnologyFiltersInput
}

input ComponentSectionsImageInput {
  backlightAndContrast: ComponentImageBacklightAndContrastInput
  colorimetry: ComponentImageColorimetryInput
  crystal: ComponentImageCrystalInput
  hdr: ComponentImageHdrInput
  id: ID
  processing: ComponentImageProcessingInput
  resolution: ID
  responseTimes: ComponentImageResponseTimesInput
  score: Float
  technology: ComponentImageTechnologyInput
}

type ComponentSectionsReviews {
  comparatives(
    filters: ExternalSiteFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ExternalSiteRelationResponseCollection
  id: ID!
  reviews(
    filters: ExternalSiteFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ExternalSiteRelationResponseCollection
}

input ComponentSectionsReviewsFiltersInput {
  and: [ComponentSectionsReviewsFiltersInput]
  comparatives: ExternalSiteFiltersInput
  not: ComponentSectionsReviewsFiltersInput
  or: [ComponentSectionsReviewsFiltersInput]
  reviews: ExternalSiteFiltersInput
}

input ComponentSectionsReviewsInput {
  comparatives: [ID]
  id: ID
  reviews: [ID]
}

type ComponentSectionsSound {
  id: ID!
  outputChannels: String
  power: Float
  score: Float!
  speakers(
    filters: ComponentSoundSpeakerFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentSoundSpeaker]
  subwoofers(
    filters: ComponentSoundSpeakerFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentSoundSpeaker]
  technologies(
    filters: SoundTechnologyFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): SoundTechnologyRelationResponseCollection
}

input ComponentSectionsSoundFiltersInput {
  and: [ComponentSectionsSoundFiltersInput]
  not: ComponentSectionsSoundFiltersInput
  or: [ComponentSectionsSoundFiltersInput]
  outputChannels: StringFilterInput
  power: FloatFilterInput
  score: FloatFilterInput
  speakers: ComponentSoundSpeakerFiltersInput
  subwoofers: ComponentSoundSpeakerFiltersInput
  technologies: SoundTechnologyFiltersInput
}

input ComponentSectionsSoundInput {
  id: ID
  outputChannels: String
  power: Float
  score: Float
  speakers: [ComponentSoundSpeakerInput]
  subwoofers: [ComponentSoundSpeakerInput]
  technologies: [ID]
}

type ComponentSectionsSystem {
  consumption: ComponentSystemConsumption
  hardware: ComponentSystemHardware
  id: ID!
  operatingSystem: OperatingSystemVersionEntityResponse
  powerSupply: Int
  powerSupplyFrequency: Int
  score: Float!
  voiceAssistants(
    filters: VoiceAssistantFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): VoiceAssistantRelationResponseCollection
}

input ComponentSectionsSystemFiltersInput {
  and: [ComponentSectionsSystemFiltersInput]
  consumption: ComponentSystemConsumptionFiltersInput
  hardware: ComponentSystemHardwareFiltersInput
  not: ComponentSectionsSystemFiltersInput
  operatingSystem: OperatingSystemVersionFiltersInput
  or: [ComponentSectionsSystemFiltersInput]
  powerSupply: IntFilterInput
  powerSupplyFrequency: IntFilterInput
  score: FloatFilterInput
  voiceAssistants: VoiceAssistantFiltersInput
}

input ComponentSectionsSystemInput {
  consumption: ComponentSystemConsumptionInput
  hardware: ComponentSystemHardwareInput
  id: ID
  operatingSystem: ID
  powerSupply: Int
  powerSupplyFrequency: Int
  score: Float
  voiceAssistants: [ID]
}

type ComponentSoundSpeaker {
  id: ID!
  power: Float!
  privateName: String
  quantity: Int!
}

input ComponentSoundSpeakerFiltersInput {
  and: [ComponentSoundSpeakerFiltersInput]
  not: ComponentSoundSpeakerFiltersInput
  or: [ComponentSoundSpeakerFiltersInput]
  power: FloatFilterInput
  privateName: StringFilterInput
  quantity: IntFilterInput
}

input ComponentSoundSpeakerInput {
  id: ID
  power: Float
  privateName: String
  quantity: Int
}

type ComponentSystemConsumption {
  averageConsumption: Float
  consumption: Float
  energyEfficiency: ENUM_COMPONENTSYSTEMCONSUMPTION_ENERGYEFFICIENCY
  id: ID!
  standbyConsumption: Float
}

input ComponentSystemConsumptionFiltersInput {
  and: [ComponentSystemConsumptionFiltersInput]
  averageConsumption: FloatFilterInput
  consumption: FloatFilterInput
  energyEfficiency: StringFilterInput
  not: ComponentSystemConsumptionFiltersInput
  or: [ComponentSystemConsumptionFiltersInput]
  standbyConsumption: FloatFilterInput
}

input ComponentSystemConsumptionInput {
  averageConsumption: Float
  consumption: Float
  energyEfficiency: ENUM_COMPONENTSYSTEMCONSUMPTION_ENERGYEFFICIENCY
  id: ID
  standbyConsumption: Float
}

type ComponentSystemHardware {
  id: ID!
  ram: Float
  rom: Float
  soc: SocModelEntityResponse
}

input ComponentSystemHardwareFiltersInput {
  and: [ComponentSystemHardwareFiltersInput]
  not: ComponentSystemHardwareFiltersInput
  or: [ComponentSystemHardwareFiltersInput]
  ram: FloatFilterInput
  rom: FloatFilterInput
  soc: SocModelFiltersInput
}

input ComponentSystemHardwareInput {
  id: ID
  ram: Float
  rom: Float
  soc: ID
}

type Connection {
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

type ConnectionEntity {
  attributes: Connection
  id: ID
}

type ConnectionEntityResponse {
  data: ConnectionEntity
}

type ConnectionEntityResponseCollection {
  data: [ConnectionEntity!]!
  meta: ResponseCollectionMeta!
}

input ConnectionFiltersInput {
  and: [ConnectionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: ConnectionFiltersInput
  or: [ConnectionFiltersInput]
  updatedAt: DateTimeFilterInput
}

input ConnectionInput {
  name: String
}

type ConnectionRelationResponseCollection {
  data: [ConnectionEntity!]!
}

type ConnectionTechnology {
  createdAt: DateTime
  description: String
  name: String!
  updatedAt: DateTime
}

type ConnectionTechnologyEntity {
  attributes: ConnectionTechnology
  id: ID
}

type ConnectionTechnologyEntityResponse {
  data: ConnectionTechnologyEntity
}

type ConnectionTechnologyEntityResponseCollection {
  data: [ConnectionTechnologyEntity!]!
  meta: ResponseCollectionMeta!
}

input ConnectionTechnologyFiltersInput {
  and: [ConnectionTechnologyFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: ConnectionTechnologyFiltersInput
  or: [ConnectionTechnologyFiltersInput]
  updatedAt: DateTimeFilterInput
}

input ConnectionTechnologyInput {
  description: String
  name: String
}

type ConnectionTechnologyRelationResponseCollection {
  data: [ConnectionTechnologyEntity!]!
}

type ConnectionType {
  connection: ConnectionEntityResponse
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

type ConnectionTypeEntity {
  attributes: ConnectionType
  id: ID
}

type ConnectionTypeEntityResponse {
  data: ConnectionTypeEntity
}

type ConnectionTypeEntityResponseCollection {
  data: [ConnectionTypeEntity!]!
  meta: ResponseCollectionMeta!
}

input ConnectionTypeFiltersInput {
  and: [ConnectionTypeFiltersInput]
  connection: ConnectionFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: ConnectionTypeFiltersInput
  or: [ConnectionTypeFiltersInput]
  updatedAt: DateTimeFilterInput
}

input ConnectionTypeInput {
  connection: ID
  name: String
}

type ConnectionTypeRelationResponseCollection {
  data: [ConnectionTypeEntity!]!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

type Dvb {
  createdAt: DateTime
  name: String!
  type: ENUM_DVB_TYPE!
  updatedAt: DateTime
}

type DvbEntity {
  attributes: Dvb
  id: ID
}

type DvbEntityResponse {
  data: DvbEntity
}

type DvbEntityResponseCollection {
  data: [DvbEntity!]!
  meta: ResponseCollectionMeta!
}

input DvbFiltersInput {
  and: [DvbFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: DvbFiltersInput
  or: [DvbFiltersInput]
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input DvbInput {
  name: String
  type: ENUM_DVB_TYPE
}

type DvbRelationResponseCollection {
  data: [DvbEntity!]!
}

enum ENUM_COMPONENTIMAGECRYSTAL_ANTIREFLECTIVEFILTER {
  improved
  normal
}

enum ENUM_COMPONENTSYSTEMCONSUMPTION_ENERGYEFFICIENCY {
  A
  B
  C
  D
  E
  F
  G
}

enum ENUM_DVB_TYPE {
  cable
  satellite
  terrestrial
}

enum ENUM_EXTERNALSITE_TYPE {
  comparative
  help_article
  review
}

type Error {
  code: String!
  message: String
}

type ExternalSite {
  createdAt: DateTime
  description: String
  image: String
  siteName: String
  slug: String
  title: String
  type: ENUM_EXTERNALSITE_TYPE!
  updatedAt: DateTime
  url: String!
  video: Boolean
}

type ExternalSiteEntity {
  attributes: ExternalSite
  id: ID
}

type ExternalSiteEntityResponse {
  data: ExternalSiteEntity
}

type ExternalSiteEntityResponseCollection {
  data: [ExternalSiteEntity!]!
  meta: ResponseCollectionMeta!
}

input ExternalSiteFiltersInput {
  and: [ExternalSiteFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  image: StringFilterInput
  not: ExternalSiteFiltersInput
  or: [ExternalSiteFiltersInput]
  siteName: StringFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  video: BooleanFilterInput
}

input ExternalSiteInput {
  description: String
  image: String
  siteName: String
  slug: String
  title: String
  type: ENUM_EXTERNALSITE_TYPE
  url: String
  video: Boolean
}

type ExternalSiteRelationResponseCollection {
  data: [ExternalSiteEntity!]!
}

type ExtraFeature {
  createdAt: DateTime
  description: String
  name: String!
  updatedAt: DateTime
}

type ExtraFeatureEntity {
  attributes: ExtraFeature
  id: ID
}

type ExtraFeatureEntityResponse {
  data: ExtraFeatureEntity
}

type ExtraFeatureEntityResponseCollection {
  data: [ExtraFeatureEntity!]!
  meta: ResponseCollectionMeta!
}

input ExtraFeatureFiltersInput {
  and: [ExtraFeatureFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: ExtraFeatureFiltersInput
  or: [ExtraFeatureFiltersInput]
  updatedAt: DateTimeFilterInput
}

input ExtraFeatureInput {
  description: String
  name: String
}

type ExtraFeatureRelationResponseCollection {
  data: [ExtraFeatureEntity!]!
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

type GamingTechnology {
  createdAt: DateTime
  description: String
  name: String!
  updatedAt: DateTime
}

type GamingTechnologyEntity {
  attributes: GamingTechnology
  id: ID
}

type GamingTechnologyEntityResponse {
  data: GamingTechnologyEntity
}

type GamingTechnologyEntityResponseCollection {
  data: [GamingTechnologyEntity!]!
  meta: ResponseCollectionMeta!
}

input GamingTechnologyFiltersInput {
  and: [GamingTechnologyFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: GamingTechnologyFiltersInput
  or: [GamingTechnologyFiltersInput]
  updatedAt: DateTimeFilterInput
}

input GamingTechnologyInput {
  description: String
  name: String
}

type GamingTechnologyRelationResponseCollection {
  data: [GamingTechnologyEntity!]!
}

union GenericMorph =
    BacklightType
  | Brand
  | Color
  | ColorCreation
  | ColorDepth
  | ColorimetryTechnology
  | ComponentConnectionConnection
  | ComponentDesignDimensions
  | ComponentGeneralBrand
  | ComponentImageBacklightAndContrast
  | ComponentImageColorimetry
  | ComponentImageCrystal
  | ComponentImageHdr
  | ComponentImageProcessing
  | ComponentImageResponseTimes
  | ComponentImageTechnology
  | ComponentSectionsConnections
  | ComponentSectionsDesign
  | ComponentSectionsGeneral
  | ComponentSectionsImage
  | ComponentSectionsReviews
  | ComponentSectionsSound
  | ComponentSectionsSystem
  | ComponentSoundSpeaker
  | ComponentSystemConsumption
  | ComponentSystemHardware
  | Connection
  | ConnectionTechnology
  | ConnectionType
  | Dvb
  | ExternalSite
  | ExtraFeature
  | GamingTechnology
  | HdrTechnology
  | I18NLocale
  | ImageProcessor
  | ImageTechnology
  | LightingType
  | Marketplace
  | MarketplaceTv
  | OperatingSystem
  | OperatingSystemVersion
  | PanelManufacturer
  | PanelTechnology
  | PaymentMethod
  | ScoreWeighting
  | ScreenResolution
  | ScreenShape
  | SocModel
  | SoundTechnology
  | Tv
  | TvSerie
  | UploadFile
  | UploadFolder
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsUser
  | VesaSize
  | VoiceAssistant
  | WirelessConnectionTechnology
  | WirelessConnectionType

type HdrTechnology {
  createdAt: DateTime
  description: String
  name: String!
  updatedAt: DateTime
}

type HdrTechnologyEntity {
  attributes: HdrTechnology
  id: ID
}

type HdrTechnologyEntityResponse {
  data: HdrTechnologyEntity
}

type HdrTechnologyEntityResponseCollection {
  data: [HdrTechnologyEntity!]!
  meta: ResponseCollectionMeta!
}

input HdrTechnologyFiltersInput {
  and: [HdrTechnologyFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: HdrTechnologyFiltersInput
  or: [HdrTechnologyFiltersInput]
  updatedAt: DateTimeFilterInput
}

input HdrTechnologyInput {
  description: String
  name: String
}

type HdrTechnologyRelationResponseCollection {
  data: [HdrTechnologyEntity!]!
}

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""
A string used to identify an i18n locale
"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input I18NLocaleInput {
  code: String
  name: String
}

type I18NLocaleRelationResponseCollection {
  data: [I18NLocaleEntity!]!
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

type ImageProcessor {
  createdAt: DateTime
  description: String
  name: String!
  updatedAt: DateTime
}

type ImageProcessorEntity {
  attributes: ImageProcessor
  id: ID
}

type ImageProcessorEntityResponse {
  data: ImageProcessorEntity
}

type ImageProcessorEntityResponseCollection {
  data: [ImageProcessorEntity!]!
  meta: ResponseCollectionMeta!
}

input ImageProcessorFiltersInput {
  and: [ImageProcessorFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: ImageProcessorFiltersInput
  or: [ImageProcessorFiltersInput]
  updatedAt: DateTimeFilterInput
}

input ImageProcessorInput {
  description: String
  name: String
}

type ImageProcessorRelationResponseCollection {
  data: [ImageProcessorEntity!]!
}

type ImageTechnology {
  createdAt: DateTime
  description: String
  name: String!
  updatedAt: DateTime
}

type ImageTechnologyEntity {
  attributes: ImageTechnology
  id: ID
}

type ImageTechnologyEntityResponse {
  data: ImageTechnologyEntity
}

type ImageTechnologyEntityResponseCollection {
  data: [ImageTechnologyEntity!]!
  meta: ResponseCollectionMeta!
}

input ImageTechnologyFiltersInput {
  and: [ImageTechnologyFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: ImageTechnologyFiltersInput
  or: [ImageTechnologyFiltersInput]
  updatedAt: DateTimeFilterInput
}

input ImageTechnologyInput {
  description: String
  name: String
}

type ImageTechnologyRelationResponseCollection {
  data: [ImageTechnologyEntity!]!
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

type LightingType {
  createdAt: DateTime
  description: String
  name: String!
  updatedAt: DateTime
}

type LightingTypeEntity {
  attributes: LightingType
  id: ID
}

type LightingTypeEntityResponse {
  data: LightingTypeEntity
}

type LightingTypeEntityResponseCollection {
  data: [LightingTypeEntity!]!
  meta: ResponseCollectionMeta!
}

input LightingTypeFiltersInput {
  and: [LightingTypeFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: LightingTypeFiltersInput
  or: [LightingTypeFiltersInput]
  updatedAt: DateTimeFilterInput
}

input LightingTypeInput {
  description: String
  name: String
}

type LightingTypeRelationResponseCollection {
  data: [LightingTypeEntity!]!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  eqi: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  null: Boolean
  or: [Long]
  startsWith: Long
}

type Marketplace {
  color: String!
  createdAt: DateTime
  logo: UploadFileEntityResponse!
  name: String!
  paymentMethods(
    filters: PaymentMethodFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): PaymentMethodRelationResponseCollection
  updatedAt: DateTime
}

type MarketplaceEntity {
  attributes: Marketplace
  id: ID
}

type MarketplaceEntityResponse {
  data: MarketplaceEntity
}

type MarketplaceEntityResponseCollection {
  data: [MarketplaceEntity!]!
  meta: ResponseCollectionMeta!
}

input MarketplaceFiltersInput {
  and: [MarketplaceFiltersInput]
  color: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: MarketplaceFiltersInput
  or: [MarketplaceFiltersInput]
  paymentMethods: PaymentMethodFiltersInput
  updatedAt: DateTimeFilterInput
}

input MarketplaceInput {
  color: String
  logo: ID
  name: String
  paymentMethods: [ID]
}

type MarketplaceRelationResponseCollection {
  data: [MarketplaceEntity!]!
}

type MarketplaceTv {
  absoluteDiscount: Float
  affiliateUrl: String
  available: Boolean
  basePrice: Float
  createdAt: DateTime
  deliveryCost: Float
  deliveryTime: String
  marketplace: MarketplaceEntityResponse
  price: Float
  reconditioned: Boolean
  relativeDiscount: Float
  tv: TvEntityResponse
  updatedAt: DateTime
  url: String
}

type MarketplaceTvEntity {
  attributes: MarketplaceTv
  id: ID
}

type MarketplaceTvEntityResponse {
  data: MarketplaceTvEntity
}

type MarketplaceTvEntityResponseCollection {
  data: [MarketplaceTvEntity!]!
  meta: ResponseCollectionMeta!
}

input MarketplaceTvFiltersInput {
  absoluteDiscount: FloatFilterInput
  affiliateUrl: StringFilterInput
  and: [MarketplaceTvFiltersInput]
  available: BooleanFilterInput
  basePrice: FloatFilterInput
  createdAt: DateTimeFilterInput
  deliveryCost: FloatFilterInput
  deliveryTime: StringFilterInput
  id: IDFilterInput
  marketplace: MarketplaceFiltersInput
  not: MarketplaceTvFiltersInput
  or: [MarketplaceTvFiltersInput]
  price: FloatFilterInput
  reconditioned: BooleanFilterInput
  relativeDiscount: FloatFilterInput
  tv: TvFiltersInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
}

input MarketplaceTvInput {
  absoluteDiscount: Float
  affiliateUrl: String
  available: Boolean
  basePrice: Float
  deliveryCost: Float
  deliveryTime: String
  marketplace: ID
  price: Float
  reconditioned: Boolean
  relativeDiscount: Float
  tv: ID
  url: String
}

type MarketplaceTvRelationResponseCollection {
  data: [MarketplaceTvEntity!]!
}

type Mutation {
  """
  Change user password. Confirm with the current password.
  """
  changePassword(
    currentPassword: String!
    password: String!
    passwordConfirmation: String!
  ): UsersPermissionsLoginPayload
  createBacklightType(data: BacklightTypeInput!): BacklightTypeEntityResponse
  createBrand(data: BrandInput!): BrandEntityResponse
  createColor(data: ColorInput!): ColorEntityResponse
  createColorCreation(data: ColorCreationInput!): ColorCreationEntityResponse
  createColorDepth(data: ColorDepthInput!): ColorDepthEntityResponse
  createColorimetryTechnology(
    data: ColorimetryTechnologyInput!
  ): ColorimetryTechnologyEntityResponse
  createConnection(data: ConnectionInput!): ConnectionEntityResponse
  createConnectionTechnology(
    data: ConnectionTechnologyInput!
  ): ConnectionTechnologyEntityResponse
  createConnectionType(data: ConnectionTypeInput!): ConnectionTypeEntityResponse
  createDvb(data: DvbInput!): DvbEntityResponse
  createExternalSite(data: ExternalSiteInput!): ExternalSiteEntityResponse
  createExtraFeature(data: ExtraFeatureInput!): ExtraFeatureEntityResponse
  createGamingTechnology(
    data: GamingTechnologyInput!
  ): GamingTechnologyEntityResponse
  createHdrTechnology(data: HdrTechnologyInput!): HdrTechnologyEntityResponse
  createImageProcessor(data: ImageProcessorInput!): ImageProcessorEntityResponse
  createImageTechnology(
    data: ImageTechnologyInput!
  ): ImageTechnologyEntityResponse
  createLightingType(data: LightingTypeInput!): LightingTypeEntityResponse
  createMarketplace(data: MarketplaceInput!): MarketplaceEntityResponse
  createMarketplaceTv(data: MarketplaceTvInput!): MarketplaceTvEntityResponse
  createOperatingSystem(
    data: OperatingSystemInput!
  ): OperatingSystemEntityResponse
  createOperatingSystemVersion(
    data: OperatingSystemVersionInput!
  ): OperatingSystemVersionEntityResponse
  createPanelManufacturer(
    data: PanelManufacturerInput!
  ): PanelManufacturerEntityResponse
  createPanelTechnology(
    data: PanelTechnologyInput!
  ): PanelTechnologyEntityResponse
  createPaymentMethod(data: PaymentMethodInput!): PaymentMethodEntityResponse
  createScreenResolution(
    data: ScreenResolutionInput!
  ): ScreenResolutionEntityResponse
  createScreenShape(data: ScreenShapeInput!): ScreenShapeEntityResponse
  createSocModel(data: SocModelInput!): SocModelEntityResponse
  createSoundTechnology(
    data: SoundTechnologyInput!
  ): SoundTechnologyEntityResponse
  createTv(data: TvInput!): TvEntityResponse
  createTvSerie(data: TvSerieInput!): TvSerieEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """
  Create a new role
  """
  createUsersPermissionsRole(
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsCreateRolePayload

  """
  Create a new user
  """
  createUsersPermissionsUser(
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!
  createVesaSize(data: VesaSizeInput!): VesaSizeEntityResponse
  createVoiceAssistant(data: VoiceAssistantInput!): VoiceAssistantEntityResponse
  createWirelessConnectionTechnology(
    data: WirelessConnectionTechnologyInput!
  ): WirelessConnectionTechnologyEntityResponse
  createWirelessConnectionType(
    data: WirelessConnectionTypeInput!
  ): WirelessConnectionTypeEntityResponse
  deleteBacklightType(id: ID!): BacklightTypeEntityResponse
  deleteBrand(id: ID!): BrandEntityResponse
  deleteColor(id: ID!): ColorEntityResponse
  deleteColorCreation(id: ID!): ColorCreationEntityResponse
  deleteColorDepth(id: ID!): ColorDepthEntityResponse
  deleteColorimetryTechnology(id: ID!): ColorimetryTechnologyEntityResponse
  deleteConnection(id: ID!): ConnectionEntityResponse
  deleteConnectionTechnology(id: ID!): ConnectionTechnologyEntityResponse
  deleteConnectionType(id: ID!): ConnectionTypeEntityResponse
  deleteDvb(id: ID!): DvbEntityResponse
  deleteExternalSite(id: ID!): ExternalSiteEntityResponse
  deleteExtraFeature(id: ID!): ExtraFeatureEntityResponse
  deleteGamingTechnology(id: ID!): GamingTechnologyEntityResponse
  deleteHdrTechnology(id: ID!): HdrTechnologyEntityResponse
  deleteImageProcessor(id: ID!): ImageProcessorEntityResponse
  deleteImageTechnology(id: ID!): ImageTechnologyEntityResponse
  deleteLightingType(id: ID!): LightingTypeEntityResponse
  deleteMarketplace(id: ID!): MarketplaceEntityResponse
  deleteMarketplaceTv(id: ID!): MarketplaceTvEntityResponse
  deleteOperatingSystem(id: ID!): OperatingSystemEntityResponse
  deleteOperatingSystemVersion(id: ID!): OperatingSystemVersionEntityResponse
  deletePanelManufacturer(id: ID!): PanelManufacturerEntityResponse
  deletePanelTechnology(id: ID!): PanelTechnologyEntityResponse
  deletePaymentMethod(id: ID!): PaymentMethodEntityResponse
  deleteScoreWeighting: ScoreWeightingEntityResponse
  deleteScreenResolution(id: ID!): ScreenResolutionEntityResponse
  deleteScreenShape(id: ID!): ScreenShapeEntityResponse
  deleteSocModel(id: ID!): SocModelEntityResponse
  deleteSoundTechnology(id: ID!): SoundTechnologyEntityResponse
  deleteTv(id: ID!): TvEntityResponse
  deleteTvSerie(id: ID!): TvSerieEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """
  Delete an existing role
  """
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """
  Delete an existing user
  """
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  deleteVesaSize(id: ID!): VesaSizeEntityResponse
  deleteVoiceAssistant(id: ID!): VoiceAssistantEntityResponse
  deleteWirelessConnectionTechnology(
    id: ID!
  ): WirelessConnectionTechnologyEntityResponse
  deleteWirelessConnectionType(id: ID!): WirelessConnectionTypeEntityResponse

  """
  Confirm an email users email address
  """
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """
  Request a reset password token
  """
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(
    field: String
    files: [Upload]!
    ref: String
    refId: ID
  ): [UploadFileEntityResponse]!

  """
  Register a user
  """
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(
    code: String!
    password: String!
    passwordConfirmation: String!
  ): UsersPermissionsLoginPayload
  updateBacklightType(
    data: BacklightTypeInput!
    id: ID!
  ): BacklightTypeEntityResponse
  updateBrand(data: BrandInput!, id: ID!): BrandEntityResponse
  updateColor(data: ColorInput!, id: ID!): ColorEntityResponse
  updateColorCreation(
    data: ColorCreationInput!
    id: ID!
  ): ColorCreationEntityResponse
  updateColorDepth(data: ColorDepthInput!, id: ID!): ColorDepthEntityResponse
  updateColorimetryTechnology(
    data: ColorimetryTechnologyInput!
    id: ID!
  ): ColorimetryTechnologyEntityResponse
  updateConnection(data: ConnectionInput!, id: ID!): ConnectionEntityResponse
  updateConnectionTechnology(
    data: ConnectionTechnologyInput!
    id: ID!
  ): ConnectionTechnologyEntityResponse
  updateConnectionType(
    data: ConnectionTypeInput!
    id: ID!
  ): ConnectionTypeEntityResponse
  updateDvb(data: DvbInput!, id: ID!): DvbEntityResponse
  updateExternalSite(
    data: ExternalSiteInput!
    id: ID!
  ): ExternalSiteEntityResponse
  updateExtraFeature(
    data: ExtraFeatureInput!
    id: ID!
  ): ExtraFeatureEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateGamingTechnology(
    data: GamingTechnologyInput!
    id: ID!
  ): GamingTechnologyEntityResponse
  updateHdrTechnology(
    data: HdrTechnologyInput!
    id: ID!
  ): HdrTechnologyEntityResponse
  updateImageProcessor(
    data: ImageProcessorInput!
    id: ID!
  ): ImageProcessorEntityResponse
  updateImageTechnology(
    data: ImageTechnologyInput!
    id: ID!
  ): ImageTechnologyEntityResponse
  updateLightingType(
    data: LightingTypeInput!
    id: ID!
  ): LightingTypeEntityResponse
  updateMarketplace(data: MarketplaceInput!, id: ID!): MarketplaceEntityResponse
  updateMarketplaceTv(
    data: MarketplaceTvInput!
    id: ID!
  ): MarketplaceTvEntityResponse
  updateOperatingSystem(
    data: OperatingSystemInput!
    id: ID!
  ): OperatingSystemEntityResponse
  updateOperatingSystemVersion(
    data: OperatingSystemVersionInput!
    id: ID!
  ): OperatingSystemVersionEntityResponse
  updatePanelManufacturer(
    data: PanelManufacturerInput!
    id: ID!
  ): PanelManufacturerEntityResponse
  updatePanelTechnology(
    data: PanelTechnologyInput!
    id: ID!
  ): PanelTechnologyEntityResponse
  updatePaymentMethod(
    data: PaymentMethodInput!
    id: ID!
  ): PaymentMethodEntityResponse
  updateScoreWeighting(data: ScoreWeightingInput!): ScoreWeightingEntityResponse
  updateScreenResolution(
    data: ScreenResolutionInput!
    id: ID!
  ): ScreenResolutionEntityResponse
  updateScreenShape(data: ScreenShapeInput!, id: ID!): ScreenShapeEntityResponse
  updateSocModel(data: SocModelInput!, id: ID!): SocModelEntityResponse
  updateSoundTechnology(
    data: SoundTechnologyInput!
    id: ID!
  ): SoundTechnologyEntityResponse
  updateTv(data: TvInput!, id: ID!): TvEntityResponse
  updateTvSerie(data: TvSerieInput!, id: ID!): TvSerieEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(
    data: UploadFolderInput!
    id: ID!
  ): UploadFolderEntityResponse

  """
  Update an existing role
  """
  updateUsersPermissionsRole(
    data: UsersPermissionsRoleInput!
    id: ID!
  ): UsersPermissionsUpdateRolePayload

  """
  Update an existing user
  """
  updateUsersPermissionsUser(
    data: UsersPermissionsUserInput!
    id: ID!
  ): UsersPermissionsUserEntityResponse!
  updateVesaSize(data: VesaSizeInput!, id: ID!): VesaSizeEntityResponse
  updateVoiceAssistant(
    data: VoiceAssistantInput!
    id: ID!
  ): VoiceAssistantEntityResponse
  updateWirelessConnectionTechnology(
    data: WirelessConnectionTechnologyInput!
    id: ID!
  ): WirelessConnectionTechnologyEntityResponse
  updateWirelessConnectionType(
    data: WirelessConnectionTypeInput!
    id: ID!
  ): WirelessConnectionTypeEntityResponse
  upload(
    field: String
    file: Upload!
    info: FileInfoInput
    ref: String
    refId: ID
  ): UploadFileEntityResponse!
}

type OperatingSystem {
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

type OperatingSystemEntity {
  attributes: OperatingSystem
  id: ID
}

type OperatingSystemEntityResponse {
  data: OperatingSystemEntity
}

type OperatingSystemEntityResponseCollection {
  data: [OperatingSystemEntity!]!
  meta: ResponseCollectionMeta!
}

input OperatingSystemFiltersInput {
  and: [OperatingSystemFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: OperatingSystemFiltersInput
  or: [OperatingSystemFiltersInput]
  updatedAt: DateTimeFilterInput
}

input OperatingSystemInput {
  name: String
}

type OperatingSystemRelationResponseCollection {
  data: [OperatingSystemEntity!]!
}

type OperatingSystemVersion {
  createdAt: DateTime
  operatingSystem: OperatingSystemEntityResponse
  uid: String
  updatedAt: DateTime
  version: String!
}

type OperatingSystemVersionEntity {
  attributes: OperatingSystemVersion
  id: ID
}

type OperatingSystemVersionEntityResponse {
  data: OperatingSystemVersionEntity
}

type OperatingSystemVersionEntityResponseCollection {
  data: [OperatingSystemVersionEntity!]!
  meta: ResponseCollectionMeta!
}

input OperatingSystemVersionFiltersInput {
  and: [OperatingSystemVersionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: OperatingSystemVersionFiltersInput
  operatingSystem: OperatingSystemFiltersInput
  or: [OperatingSystemVersionFiltersInput]
  uid: StringFilterInput
  updatedAt: DateTimeFilterInput
  version: StringFilterInput
}

input OperatingSystemVersionInput {
  operatingSystem: ID
  uid: String
  version: String
}

type OperatingSystemVersionRelationResponseCollection {
  data: [OperatingSystemVersionEntity!]!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

type PanelManufacturer {
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

type PanelManufacturerEntity {
  attributes: PanelManufacturer
  id: ID
}

type PanelManufacturerEntityResponse {
  data: PanelManufacturerEntity
}

type PanelManufacturerEntityResponseCollection {
  data: [PanelManufacturerEntity!]!
  meta: ResponseCollectionMeta!
}

input PanelManufacturerFiltersInput {
  and: [PanelManufacturerFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: PanelManufacturerFiltersInput
  or: [PanelManufacturerFiltersInput]
  updatedAt: DateTimeFilterInput
}

input PanelManufacturerInput {
  name: String
}

type PanelManufacturerRelationResponseCollection {
  data: [PanelManufacturerEntity!]!
}

type PanelTechnology {
  createdAt: DateTime
  description: String
  type: String!
  updatedAt: DateTime
}

type PanelTechnologyEntity {
  attributes: PanelTechnology
  id: ID
}

type PanelTechnologyEntityResponse {
  data: PanelTechnologyEntity
}

type PanelTechnologyEntityResponseCollection {
  data: [PanelTechnologyEntity!]!
  meta: ResponseCollectionMeta!
}

input PanelTechnologyFiltersInput {
  and: [PanelTechnologyFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  not: PanelTechnologyFiltersInput
  or: [PanelTechnologyFiltersInput]
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input PanelTechnologyInput {
  description: String
  type: String
}

type PanelTechnologyRelationResponseCollection {
  data: [PanelTechnologyEntity!]!
}

type PaymentMethod {
  createdAt: DateTime
  logo: UploadFileEntityResponse!
  name: String!
  updatedAt: DateTime
}

type PaymentMethodEntity {
  attributes: PaymentMethod
  id: ID
}

type PaymentMethodEntityResponse {
  data: PaymentMethodEntity
}

type PaymentMethodEntityResponseCollection {
  data: [PaymentMethodEntity!]!
  meta: ResponseCollectionMeta!
}

input PaymentMethodFiltersInput {
  and: [PaymentMethodFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: PaymentMethodFiltersInput
  or: [PaymentMethodFiltersInput]
  updatedAt: DateTimeFilterInput
}

input PaymentMethodInput {
  logo: ID
  name: String
}

type PaymentMethodRelationResponseCollection {
  data: [PaymentMethodEntity!]!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  backlightType(id: ID): BacklightTypeEntityResponse
  backlightTypes(
    filters: BacklightTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): BacklightTypeEntityResponseCollection
  brand(id: ID): BrandEntityResponse
  brands(
    filters: BrandFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): BrandEntityResponseCollection
  color(id: ID): ColorEntityResponse
  colorCreation(id: ID): ColorCreationEntityResponse
  colorCreations(
    filters: ColorCreationFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ColorCreationEntityResponseCollection
  colorDepth(id: ID): ColorDepthEntityResponse
  colorDepths(
    filters: ColorDepthFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ColorDepthEntityResponseCollection
  colorimetryTechnologies(
    filters: ColorimetryTechnologyFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ColorimetryTechnologyEntityResponseCollection
  colorimetryTechnology(id: ID): ColorimetryTechnologyEntityResponse
  colors(
    filters: ColorFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ColorEntityResponseCollection
  connection(id: ID): ConnectionEntityResponse
  connectionTechnologies(
    filters: ConnectionTechnologyFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ConnectionTechnologyEntityResponseCollection
  connectionTechnology(id: ID): ConnectionTechnologyEntityResponse
  connectionType(id: ID): ConnectionTypeEntityResponse
  connectionTypes(
    filters: ConnectionTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ConnectionTypeEntityResponseCollection
  connections(
    filters: ConnectionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ConnectionEntityResponseCollection
  dvb(id: ID): DvbEntityResponse
  dvbs(
    filters: DvbFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): DvbEntityResponseCollection
  externalSite(id: ID): ExternalSiteEntityResponse
  externalSites(
    filters: ExternalSiteFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ExternalSiteEntityResponseCollection
  extraFeature(id: ID): ExtraFeatureEntityResponse
  extraFeatures(
    filters: ExtraFeatureFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ExtraFeatureEntityResponseCollection
  gamingTechnologies(
    filters: GamingTechnologyFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): GamingTechnologyEntityResponseCollection
  gamingTechnology(id: ID): GamingTechnologyEntityResponse
  hdrTechnologies(
    filters: HdrTechnologyFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): HdrTechnologyEntityResponseCollection
  hdrTechnology(id: ID): HdrTechnologyEntityResponse
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(
    filters: I18NLocaleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): I18NLocaleEntityResponseCollection
  imageProcessor(id: ID): ImageProcessorEntityResponse
  imageProcessors(
    filters: ImageProcessorFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ImageProcessorEntityResponseCollection
  imageTechnologies(
    filters: ImageTechnologyFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ImageTechnologyEntityResponseCollection
  imageTechnology(id: ID): ImageTechnologyEntityResponse
  lightingType(id: ID): LightingTypeEntityResponse
  lightingTypes(
    filters: LightingTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): LightingTypeEntityResponseCollection
  marketplace(id: ID): MarketplaceEntityResponse
  marketplaceTv(id: ID): MarketplaceTvEntityResponse
  marketplaceTvs(
    filters: MarketplaceTvFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): MarketplaceTvEntityResponseCollection
  marketplaces(
    filters: MarketplaceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): MarketplaceEntityResponseCollection
  me: UsersPermissionsMe
  operatingSystem(id: ID): OperatingSystemEntityResponse
  operatingSystemVersion(id: ID): OperatingSystemVersionEntityResponse
  operatingSystemVersions(
    filters: OperatingSystemVersionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): OperatingSystemVersionEntityResponseCollection
  operatingSystems(
    filters: OperatingSystemFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): OperatingSystemEntityResponseCollection
  panelManufacturer(id: ID): PanelManufacturerEntityResponse
  panelManufacturers(
    filters: PanelManufacturerFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): PanelManufacturerEntityResponseCollection
  panelTechnologies(
    filters: PanelTechnologyFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): PanelTechnologyEntityResponseCollection
  panelTechnology(id: ID): PanelTechnologyEntityResponse
  paymentMethod(id: ID): PaymentMethodEntityResponse
  paymentMethods(
    filters: PaymentMethodFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): PaymentMethodEntityResponseCollection
  scoreWeighting: ScoreWeightingEntityResponse
  screenResolution(id: ID): ScreenResolutionEntityResponse
  screenResolutions(
    filters: ScreenResolutionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ScreenResolutionEntityResponseCollection
  screenShape(id: ID): ScreenShapeEntityResponse
  screenShapes(
    filters: ScreenShapeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ScreenShapeEntityResponseCollection
  socModel(id: ID): SocModelEntityResponse
  socModels(
    filters: SocModelFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): SocModelEntityResponseCollection
  soundTechnologies(
    filters: SoundTechnologyFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): SoundTechnologyEntityResponseCollection
  soundTechnology(id: ID): SoundTechnologyEntityResponse
  tv(id: ID): TvEntityResponse
  tvSerie(id: ID): TvSerieEntityResponse
  tvSeries(
    filters: TvSerieFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TvSerieEntityResponseCollection
  tvs(
    filters: TvFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): TvEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(
    filters: UsersPermissionsRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserEntityResponseCollection
  vesaSize(id: ID): VesaSizeEntityResponse
  vesaSizes(
    filters: VesaSizeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): VesaSizeEntityResponseCollection
  voiceAssistant(id: ID): VoiceAssistantEntityResponse
  voiceAssistants(
    filters: VoiceAssistantFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): VoiceAssistantEntityResponseCollection
  wirelessConnectionTechnologies(
    filters: WirelessConnectionTechnologyFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): WirelessConnectionTechnologyEntityResponseCollection
  wirelessConnectionTechnology(
    id: ID
  ): WirelessConnectionTechnologyEntityResponse
  wirelessConnectionType(id: ID): WirelessConnectionTypeEntityResponse
  wirelessConnectionTypes(
    filters: WirelessConnectionTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): WirelessConnectionTypeEntityResponseCollection
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

type ScoreWeighting {
  connections: Float!
  createdAt: DateTime
  design: Float!
  image: Float!
  sound: Float!
  system: Float!
  updatedAt: DateTime
}

type ScoreWeightingEntity {
  attributes: ScoreWeighting
  id: ID
}

type ScoreWeightingEntityResponse {
  data: ScoreWeightingEntity
}

type ScoreWeightingEntityResponseCollection {
  data: [ScoreWeightingEntity!]!
  meta: ResponseCollectionMeta!
}

input ScoreWeightingFiltersInput {
  and: [ScoreWeightingFiltersInput]
  connections: FloatFilterInput
  createdAt: DateTimeFilterInput
  design: FloatFilterInput
  image: FloatFilterInput
  not: ScoreWeightingFiltersInput
  or: [ScoreWeightingFiltersInput]
  sound: FloatFilterInput
  system: FloatFilterInput
  updatedAt: DateTimeFilterInput
}

input ScoreWeightingInput {
  connections: Float
  design: Float
  image: Float
  sound: Float
  system: Float
}

type ScoreWeightingRelationResponseCollection {
  data: [ScoreWeightingEntity!]!
}

type ScreenResolution {
  alternativeName: String
  createdAt: DateTime
  resolution: String!
  updatedAt: DateTime
}

type ScreenResolutionEntity {
  attributes: ScreenResolution
  id: ID
}

type ScreenResolutionEntityResponse {
  data: ScreenResolutionEntity
}

type ScreenResolutionEntityResponseCollection {
  data: [ScreenResolutionEntity!]!
  meta: ResponseCollectionMeta!
}

input ScreenResolutionFiltersInput {
  alternativeName: StringFilterInput
  and: [ScreenResolutionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: ScreenResolutionFiltersInput
  or: [ScreenResolutionFiltersInput]
  resolution: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ScreenResolutionInput {
  alternativeName: String
  resolution: String
}

type ScreenResolutionRelationResponseCollection {
  data: [ScreenResolutionEntity!]!
}

type ScreenShape {
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

type ScreenShapeEntity {
  attributes: ScreenShape
  id: ID
}

type ScreenShapeEntityResponse {
  data: ScreenShapeEntity
}

type ScreenShapeEntityResponseCollection {
  data: [ScreenShapeEntity!]!
  meta: ResponseCollectionMeta!
}

input ScreenShapeFiltersInput {
  and: [ScreenShapeFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: ScreenShapeFiltersInput
  or: [ScreenShapeFiltersInput]
  updatedAt: DateTimeFilterInput
}

input ScreenShapeInput {
  name: String
}

type ScreenShapeRelationResponseCollection {
  data: [ScreenShapeEntity!]!
}

type SocModel {
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

type SocModelEntity {
  attributes: SocModel
  id: ID
}

type SocModelEntityResponse {
  data: SocModelEntity
}

type SocModelEntityResponseCollection {
  data: [SocModelEntity!]!
  meta: ResponseCollectionMeta!
}

input SocModelFiltersInput {
  and: [SocModelFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: SocModelFiltersInput
  or: [SocModelFiltersInput]
  updatedAt: DateTimeFilterInput
}

input SocModelInput {
  name: String
}

type SocModelRelationResponseCollection {
  data: [SocModelEntity!]!
}

type SoundTechnology {
  createdAt: DateTime
  description: String
  name: String!
  updatedAt: DateTime
}

type SoundTechnologyEntity {
  attributes: SoundTechnology
  id: ID
}

type SoundTechnologyEntityResponse {
  data: SoundTechnologyEntity
}

type SoundTechnologyEntityResponseCollection {
  data: [SoundTechnologyEntity!]!
  meta: ResponseCollectionMeta!
}

input SoundTechnologyFiltersInput {
  and: [SoundTechnologyFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: SoundTechnologyFiltersInput
  or: [SoundTechnologyFiltersInput]
  updatedAt: DateTimeFilterInput
}

input SoundTechnologyInput {
  description: String
  name: String
}

type SoundTechnologyRelationResponseCollection {
  data: [SoundTechnologyEntity!]!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

"""
A time string with format HH:mm:ss.SSS
"""
scalar Time

input TimeFilterInput {
  and: [Time]
  between: [Time]
  contains: Time
  containsi: Time
  endsWith: Time
  eq: Time
  eqi: Time
  gt: Time
  gte: Time
  in: [Time]
  lt: Time
  lte: Time
  ne: Time
  not: TimeFilterInput
  notContains: Time
  notContainsi: Time
  notIn: [Time]
  notNull: Boolean
  null: Boolean
  or: [Time]
  startsWith: Time
}

type Tv {
  connections: ComponentSectionsConnections
  createdAt: DateTime
  design: ComponentSectionsDesign
  ean: String!
  general: ComponentSectionsGeneral
  hits: Int
  image: ComponentSectionsImage
  maxPrice: Float
  minPrice: Float
  name: String!
  publishedAt: DateTime
  reviews: ComponentSectionsReviews
  rrp: Float
  score: Float
  slug: String
  sound: ComponentSectionsSound
  system: ComponentSectionsSystem
  updatedAt: DateTime
}

type TvEntity {
  attributes: Tv
  id: ID
}

type TvEntityResponse {
  data: TvEntity
}

type TvEntityResponseCollection {
  data: [TvEntity!]!
  meta: ResponseCollectionMeta!
}

input TvFiltersInput {
  and: [TvFiltersInput]
  connections: ComponentSectionsConnectionsFiltersInput
  createdAt: DateTimeFilterInput
  design: ComponentSectionsDesignFiltersInput
  ean: StringFilterInput
  general: ComponentSectionsGeneralFiltersInput
  hits: IntFilterInput
  id: IDFilterInput
  image: ComponentSectionsImageFiltersInput
  maxPrice: FloatFilterInput
  minPrice: FloatFilterInput
  name: StringFilterInput
  not: TvFiltersInput
  or: [TvFiltersInput]
  publishedAt: DateTimeFilterInput
  reviews: ComponentSectionsReviewsFiltersInput
  rrp: FloatFilterInput
  score: FloatFilterInput
  slug: StringFilterInput
  sound: ComponentSectionsSoundFiltersInput
  system: ComponentSectionsSystemFiltersInput
  updatedAt: DateTimeFilterInput
}

input TvInput {
  connections: ComponentSectionsConnectionsInput
  design: ComponentSectionsDesignInput
  ean: String
  general: ComponentSectionsGeneralInput
  hits: Int
  image: ComponentSectionsImageInput
  maxPrice: Float
  minPrice: Float
  name: String
  publishedAt: DateTime
  reviews: ComponentSectionsReviewsInput
  rrp: Float
  score: Float
  slug: String
  sound: ComponentSectionsSoundInput
  system: ComponentSectionsSystemInput
}

type TvRelationResponseCollection {
  data: [TvEntity!]!
}

type TvSerie {
  brand: BrandEntityResponse
  createdAt: DateTime
  name: String!
  uid: String
  updatedAt: DateTime
}

type TvSerieEntity {
  attributes: TvSerie
  id: ID
}

type TvSerieEntityResponse {
  data: TvSerieEntity
}

type TvSerieEntityResponseCollection {
  data: [TvSerieEntity!]!
  meta: ResponseCollectionMeta!
}

input TvSerieFiltersInput {
  and: [TvSerieFiltersInput]
  brand: BrandFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: TvSerieFiltersInput
  or: [TvSerieFiltersInput]
  uid: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input TvSerieInput {
  brand: ID
  name: String
  uid: String
}

type TvSerieRelationResponseCollection {
  data: [TvSerieEntity!]!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionEntityResponse {
  data: UsersPermissionsPermissionEntity
}

type UsersPermissionsPermissionEntityResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsPermissionInput {
  action: String
  role: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(
    filters: UsersPermissionsPermissionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsRoleRelationResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

type VesaSize {
  createdAt: DateTime
  size: String!
  updatedAt: DateTime
}

type VesaSizeEntity {
  attributes: VesaSize
  id: ID
}

type VesaSizeEntityResponse {
  data: VesaSizeEntity
}

type VesaSizeEntityResponseCollection {
  data: [VesaSizeEntity!]!
  meta: ResponseCollectionMeta!
}

input VesaSizeFiltersInput {
  and: [VesaSizeFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: VesaSizeFiltersInput
  or: [VesaSizeFiltersInput]
  size: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input VesaSizeInput {
  size: String
}

type VesaSizeRelationResponseCollection {
  data: [VesaSizeEntity!]!
}

type VoiceAssistant {
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

type VoiceAssistantEntity {
  attributes: VoiceAssistant
  id: ID
}

type VoiceAssistantEntityResponse {
  data: VoiceAssistantEntity
}

type VoiceAssistantEntityResponseCollection {
  data: [VoiceAssistantEntity!]!
  meta: ResponseCollectionMeta!
}

input VoiceAssistantFiltersInput {
  and: [VoiceAssistantFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: VoiceAssistantFiltersInput
  or: [VoiceAssistantFiltersInput]
  updatedAt: DateTimeFilterInput
}

input VoiceAssistantInput {
  name: String
}

type VoiceAssistantRelationResponseCollection {
  data: [VoiceAssistantEntity!]!
}

type WirelessConnectionTechnology {
  createdAt: DateTime
  name: String!
  type: WirelessConnectionTypeEntityResponse
  updatedAt: DateTime
}

type WirelessConnectionTechnologyEntity {
  attributes: WirelessConnectionTechnology
  id: ID
}

type WirelessConnectionTechnologyEntityResponse {
  data: WirelessConnectionTechnologyEntity
}

type WirelessConnectionTechnologyEntityResponseCollection {
  data: [WirelessConnectionTechnologyEntity!]!
  meta: ResponseCollectionMeta!
}

input WirelessConnectionTechnologyFiltersInput {
  and: [WirelessConnectionTechnologyFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: WirelessConnectionTechnologyFiltersInput
  or: [WirelessConnectionTechnologyFiltersInput]
  type: WirelessConnectionTypeFiltersInput
  updatedAt: DateTimeFilterInput
}

input WirelessConnectionTechnologyInput {
  name: String
  type: ID
}

type WirelessConnectionTechnologyRelationResponseCollection {
  data: [WirelessConnectionTechnologyEntity!]!
}

type WirelessConnectionType {
  createdAt: DateTime
  name: String!
  technologies(
    filters: WirelessConnectionTechnologyFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): WirelessConnectionTechnologyRelationResponseCollection
  updatedAt: DateTime
}

type WirelessConnectionTypeEntity {
  attributes: WirelessConnectionType
  id: ID
}

type WirelessConnectionTypeEntityResponse {
  data: WirelessConnectionTypeEntity
}

type WirelessConnectionTypeEntityResponseCollection {
  data: [WirelessConnectionTypeEntity!]!
  meta: ResponseCollectionMeta!
}

input WirelessConnectionTypeFiltersInput {
  and: [WirelessConnectionTypeFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: WirelessConnectionTypeFiltersInput
  or: [WirelessConnectionTypeFiltersInput]
  technologies: WirelessConnectionTechnologyFiltersInput
  updatedAt: DateTimeFilterInput
}

input WirelessConnectionTypeInput {
  name: String
  technologies: [ID]
}

type WirelessConnectionTypeRelationResponseCollection {
  data: [WirelessConnectionTypeEntity!]!
}
